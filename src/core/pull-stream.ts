import { Promisable } from './promisable.js';

/**
 * Asynchronous pull stream callback result type.
 *
 * @template T Type of next input data
 * @template R Type of current output data
 */
export type PullStreamCallbackResult<T, R> = {
  next: T | null;
  data: R;
};

/**
 * Asynchronous pull stream callback function type.
 *
 * @template T Type of input data
 * @template R Type of output data
 * @param input Current input value to process (null for initial call)
 * @returns Processing result
 */
export type PullStreamCallback<T, R> = (
  input: T | null,
) => Promisable<PullStreamCallbackResult<T, R>>;

/**
 * Asynchronous pull stream generator type.
 *
 * @template T Type of data generated by the generator
 *
 * @example
 * async function* numberStream(): PullStream<number> {
 *   yield 1;
 *   yield 2;
 *   yield 3;
 * }
 *
 * for await (const value of numberStream()) {
 *   console.log(value); // 1, 2, 3
 * }
 */
export type PullStream<T> = AsyncGenerator<T, void, void>;
export type PullStreamResult<T> = IteratorResult<T, void>;
